{
  "id": "guide/store/recipes/injecting",
  "title": "Using Dependency Injection",
  "contents": "\n<div class=\"content\">\n<h1 id=\"using-dependency-injection\">Using Dependency Injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/injecting#using-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"injecting-reducers\">Injecting Reducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/injecting#injecting-reducers\"><i class=\"material-icons\">link</i></a></h2>\n<p>To inject the root reducers into your application, use an <code>InjectionToken</code> and a <code>Provider</code> to register the reducers through dependency injection.</p>\n<code-example language=\"ts\">\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { StoreModule, ActionReducerMap } from '@ngrx/store';\n\nimport { SomeService } from './some.service';\nimport * as fromRoot from './reducers';\n\nexport const REDUCER_TOKEN = new InjectionToken&#x3C;\n  ActionReducerMap&#x3C;fromRoot.State>\n>('Registered Reducers');\n\nexport function getReducers(someService: SomeService) {\n  return someService.getReducers();\n}\n\n@NgModule({\n  imports: [StoreModule.forRoot(REDUCER_TOKEN)],\n  providers: [\n    {\n      provide: REDUCER_TOKEN,\n      deps: [SomeService],\n      useFactory: getReducers,\n    },\n  ],\n})\nexport class AppModule {}\n</code-example>\n<p>Reducers are also injected when composing state through feature modules.</p>\n<code-example language=\"ts\">\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { StoreModule, ActionReducerMap } from '@ngrx/store';\n\nimport * as fromFeature from './reducers';\n\nexport const FEATURE_REDUCER_TOKEN = new InjectionToken&#x3C;\n  ActionReducerMap&#x3C;fromFeature.State>\n>('Feature Reducers');\n\nexport function getReducers(): ActionReducerMap&#x3C;fromFeature.State> {\n  // map of reducers\n  return {};\n}\n\n@NgModule({\n  imports: [StoreModule.forFeature('feature', FEATURE_REDUCER_TOKEN)],\n  providers: [\n    {\n      provide: FEATURE_REDUCER_TOKEN,\n      useFactory: getReducers,\n    },\n  ],\n})\nexport class FeatureModule {}\n</code-example>\n<h2 id=\"injecting-meta-reducers\">Injecting Meta-Reducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/injecting#injecting-meta-reducers\"><i class=\"material-icons\">link</i></a></h2>\n<p>To inject 'middleware' meta reducers, use the <code>META_REDUCERS</code> injection token exported in\nthe Store API and a <code>Provider</code> to register the meta reducers through dependency\ninjection.</p>\n<code-example language=\"ts\">\nimport { MetaReducer, META_REDUCERS } from '@ngrx/store';\nimport { SomeService } from './some.service';\nimport * as fromRoot from './reducers';\n\nexport function getMetaReducers(\n  some: SomeService\n): MetaReducer&#x3C;fromRoot.State>[] {\n  // return array of meta reducers;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: META_REDUCERS,\n      deps: [SomeService],\n      useFactory: getMetaReducers,\n    },\n  ],\n})\nexport class AppModule {}\n</code-example>\n\n</div>"
}