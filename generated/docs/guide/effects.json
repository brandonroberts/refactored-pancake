{
  "id": "guide/effects",
  "title": "Effects",
  "contents": "\n<div class=\"content\">\n<h1 id=\"effects\">Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects#effects\"><i class=\"material-icons\">link</i></a></h1>\n<p>RxJS powered side effect model for <a href=\"guide/store\">Store</a></p>\n<p>Effects provides an API to model event sources as actions. Effects:</p>\n<ul>\n<li>Listen for actions dispatched from <a href=\"guide/store\">Store</a>.</li>\n<li>Isolate side effects from components, allowing for more <em>pure</em> components that select state and dispatch actions.</li>\n<li>Provide <a href=\"https://martinfowler.com/eaaDev/EventSourcing.html\">new sources</a> of actions to reduce state based on external interactions such as network requests, web socket messages and time-based events.</li>\n</ul>\n<h3 id=\"installation\">Installation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects#installation\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\">\nnpm install @ngrx/effects --save\n</code-example>\n<code-example language=\"sh\">\nyarn add @ngrx/effects\n</code-example>\n<h2 id=\"apis\">APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects#apis\"><i class=\"material-icons\">link</i></a></h2>\n<p>Effects are injectable service classes that use two main APIs.</p>\n<h3 id=\"effect-decorator\">Effect decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects#effect-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>Effect</code> decorator provides metadata to register observable side-effects in the effects class. Registered effects provide new actions provided by the source Observable to the store.</p>\n<h3 id=\"actions-observable\">Actions Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects#actions-observable\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>Represents an observable of all actions dispatched to the store.</li>\n<li>Emits the latest action <em>after</em> the action has passed through all reducers.</li>\n<li>The <code>ofType</code> operator lets you filter for actions of a certain type in which you want to use to perform a side effect.</li>\n</ul>\n<h2 id=\"setup\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects#setup\"><i class=\"material-icons\">link</i></a></h2>\n<ol>\n<li>Create an AuthEffects service that describes a source of login actions:</li>\n</ol>\n<code-example language=\"ts\">\n// ./effects/auth.effects.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Action } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthEffects {\n  // Listen for the 'LOGIN' action\n  @Effect()\n  login$: Observable&#x3C;Action> = this.actions$.pipe(\n    ofType('LOGIN'),\n    mergeMap(action =>\n      this.http.post('/auth', action.payload).pipe(\n        // If successful, dispatch success action with result\n        map(data => ({ type: 'LOGIN_SUCCESS', payload: data })),\n        // If request fails, dispatch failed action\n        catchError(() => of({ type: 'LOGIN_FAILED' }))\n      )\n    )\n  );\n\n  constructor(private http: HttpClient, private actions$: Actions) {}\n}\n</code-example>\n<ol start=\"2\">\n<li>Register the EffectsModule in your application root imports. This EffectsModule <em>must</em> be added to\nyour root <code>NgModule</code> for the effects providers to be registered and start when your application is loaded.</li>\n</ol>\n<code-example language=\"ts\">\nimport { EffectsModule } from '@ngrx/effects';\nimport { AuthEffects } from './effects/auth.effects';\n\n@NgModule({\n  imports: [EffectsModule.forRoot([AuthEffects])],\n})\nexport class AppModule {}\n</code-example>\n<p>For feature modules, register your effects via <code>EffectsModule.forFeature</code> method in your module's <code>imports</code>:</p>\n<code-example language=\"ts\">\nimport { EffectsModule } from '@ngrx/effects';\nimport { AdminEffects } from './effects/admin.effects';\n\n@NgModule({\n  imports: [EffectsModule.forFeature([AdminEffects])],\n})\nexport class AdminModule {}\n</code-example>\n\n</div>"
}